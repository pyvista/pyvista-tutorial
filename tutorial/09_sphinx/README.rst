.. _sphinx:

PyVista and Sphinx
==================

Leverage PyVista to make some awesome interactive web documentation. (20 min for talk, 10 min for exercise)

.. tip::

    This section of the tutorial was adopted from `Plotting Themes <https://docs.pyvista.org/user-guide/themes.html>`_
    and `Sphinx PyVista Plot Directive <https://docs.pyvista.org/extras/plot_directive.html>`_
    chapter of the PyVista documentation.


.. insert section content here

.. themes.rst
.. _userguide_themes:

Plotting Themes
===============

PyVista plotting parameters can be controlled on a plot by plot basis
or through a global theme, making it possible to control mesh colors
and styles through one global configuration.

The default theme parameters in PyVista can be accessed and displayed with:

.. code:: python

   >>> import pyvista
   >>> pyvista.global_theme

Default plotting parameters can be accessed individually by their
attribute names:

.. code:: python

   >>> pyvista.global_theme.color = 'tan'

Here's an example plot of the Stanford Dragon using default plotting
parameters:

.. pyvista-plot::
   :context:

   >>> import pyvista
   >>> from pyvista import examples
   >>> dragon = examples.download_dragon()
   >>> dragon.plot(cpos='xy')

These parameters can then be modified globally with:

.. pyvista-plot::
   :context:

   >>> pyvista.global_theme.color = 'red'
   >>> pyvista.global_theme.background = 'white'
   >>> pyvista.global_theme.axes.show = False

Now, the mesh will be plotted with the new global parameters:

.. pyvista-plot::
   :context:

   >>> dragon.plot(cpos='xy')

This is identical to plotting the mesh with the following parameters:

.. pyvista-plot::
   :context:

   >>> dragon.plot(cpos='xy', color='red', background='white', show_axes=False)


Creating A Custom Theme
-----------------------
You can customize a theme based on one of the built-in themes and then
apply it globally with:

.. code:: python

   Create a theme based off the DocumentTheme

   >>> my_theme = pyvista.themes.DocumentTheme()
   >>> my_theme.cmap = 'jet'
   >>> my_theme.show_edges = True

   Apply it globally

   >>> pyvista.global_theme.load_theme(my_theme)

Alternatively, you can save the theme to disk to be used later with:

.. code:: python

   >>> my_theme.save('my_theme.json')

And then subsequently loaded in a new session of pyvista with:

.. code:: python

   >>> pyvista.global_theme.load_theme('my_theme.json')


Theme API
---------
See :ref:`theme_api` for the full API definition.


.. plot_directive.rst
.. _ref_plot_directive_docs:

Sphinx PyVista Plot Directive
=============================
You can generate static images of pyvista plots using the
``.. pyvista-plot::`` directive by adding the following to your
``conf.py`` when building your documentation using Sphinx.

.. code:: python

   extensions = [
       "sphinx.ext.napoleon",
       "pyvista.ext.plot_directive",
   ]

You can then issue the plotting directive within your sphinx
documentation files::

   .. pyvista-plot::
      :caption: A sphere
      :include-source: True

      >>> import pyvista
      >>> sphere = pyvista.Sphere()
      >>> out = sphere.plot()

Which will be rendered as:

.. pyvista-plot::
   :caption: This is a default sphere
   :include-source: True

   >>> import pyvista
   >>> sphere = pyvista.Sphere()
   >>> out = sphere.plot()


State of Backends of PyVista
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+---------------+--------------------+---------+----------------------+
|               | Rendering Location | Backend | Requires Framebuffer |
+---------------+--------------------+---------+----------------------+
| panel         | Client             | vtk.js  | Yes                  |
+---------------+--------------------+---------+----------------------+
| pythreejs     | Client             | threejs | No                   |
+---------------+--------------------+---------+----------------------+
| ipygany       | Client             | threejs | No                   |
+---------------+--------------------+---------+----------------------+
| ipyvtklink    | Server             | vtk     | Yes                  |
+---------------+--------------------+---------+----------------------+
| itkwidgets    | Client             | vtk.js  | Yes                  |
+---------------+--------------------+---------+----------------------+

Exercises
---------

Let's make sphinx document using PyVista using `examples_sphinx` files.
Please use theme and backends you like.

.. leave blank after this point for Sphinx-Gallery to populate examples


.. raw:: html

    <div class="sphx-glr-clear"></div>



.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
