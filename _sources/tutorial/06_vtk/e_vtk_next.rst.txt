
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/06_vtk/e_vtk_next.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_06_vtk_e_vtk_next.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_06_vtk_e_vtk_next.py:


VTK's Next Generation API
~~~~~~~~~~~~~~~~~~~~~~~~~

This requires a pre-release version of VTK:

.. code-block:: bash

    pip install --extra-index-url https://wheels.vtk.org vtk==9.3.20240629.dev0

.. GENERATED FROM PYTHON SOURCE LINES 12-43

.. code-block:: Python


    import vtkmodules.vtkInteractionStyle
    from vtkmodules.vtkRenderingCore import (
        vtkActor,
        vtkCompositePolyDataMapper,
        vtkLightKit,
        vtkPolyDataMapper,
        vtkRenderer,
        vtkRenderWindow,
        vtkRenderWindowInteractor,
    )

    # for factory overrides
    import vtkmodules.vtkRenderingOpenGL2  # noqa
    import vtkmodules.vtkRenderingUI  # noqa

    # Creates a render window interactor, connects it to a render window.
    # Switch the interactor style such that left mouse click and drag orbit the camera
    # around the camera's focal point.
    interactor = vtkRenderWindowInteractor()
    interactor.interactor_style.SetCurrentStyleToTrackballCamera()

    window = vtkRenderWindow(size=(1280, 720), interactor=interactor)

    renderer = vtkRenderer(automatic_light_creation=False, background=(1.0, 1.0, 1.0))
    window.AddRenderer(renderer)

    # Uses light kit for better lit scenes than the default in VTK.
    light_kit = vtkLightKit()
    light_kit.AddLightsToRenderer(renderer)


.. GENERATED FROM PYTHON SOURCE LINES 44-45

Load input mesh from a vtkPartitionedDataSetCollection file

.. GENERATED FROM PYTHON SOURCE LINES 45-58

.. code-block:: Python

    from vtkmodules.vtkIOXML import vtkXMLPartitionedDataSetCollectionReader

    reader = vtkXMLPartitionedDataSetCollectionReader()
    reader.file_name = "data/mesh.vtpc"
    reader.Update()
    reactor = reader.output

    actor = vtkActor()
    actor.mapper = (reactor >> vtkCompositePolyDataMapper()).last
    # Make the toroid translucent so we can look at objects inside it.
    actor.property.opacity = 0.2
    renderer.AddActor(actor)


.. GENERATED FROM PYTHON SOURCE LINES 59-60

Construct magpy coil objects for each coil in the reactor mesh.

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: Python

    from utils.build_magnetic_coils import build_magnetic_coils

    coils = build_magnetic_coils(reactor, current=1000)

    from vtkmodules.util.numpy_support import vtk_to_numpy


.. GENERATED FROM PYTHON SOURCE LINES 67-68

Compute B, H in a 32x32x32 grid

.. GENERATED FROM PYTHON SOURCE LINES 68-77

.. code-block:: Python

    from vtkmodules.vtkCommonDataModel import vtkImageData

    grid = vtkImageData(extent=(-16, 16, -16, 16, -16, 16), spacing=(0.1, 0.1, 0.1))
    grid_points = vtk_to_numpy(grid.points.data)
    b = coils.getB(grid_points) * 1000
    grid.point_data.set_array("B (mT)", b)
    h = coils.getH(grid_points)
    grid.point_data.set_array("H (A/m)", h)


.. GENERATED FROM PYTHON SOURCE LINES 78-79

Show coils

.. GENERATED FROM PYTHON SOURCE LINES 79-88

.. code-block:: Python

    import magpylib as magpy
    from utils.save_dataset import save_dataset

    magpy.show(coils, arrow=True)
    save_dataset(grid, "data/solution.vti")

    from vtkmodules.util.execution_model import select_ports
    from vtkmodules.vtkFiltersFlowPaths import vtkStreamTracer


.. GENERATED FROM PYTHON SOURCE LINES 89-90

Compute streamlines of B field induced by toroidal coils.

.. GENERATED FROM PYTHON SOURCE LINES 90-105

.. code-block:: Python

    from vtkmodules.vtkFiltersSources import vtkSphereSource

    trace_streamlines = vtkStreamTracer(
        integrator_type=vtkStreamTracer.RUNGE_KUTTA45,
        integration_direction=vtkStreamTracer.BOTH,
        initial_integration_step=0.2,
        maximum_propagation=3.2,
    )
    trace_streamlines.SetInputArrayToProcess(0, 0, 0, 0, "B (mT)")

    create_sphere = vtkSphereSource(theta_resolution=16)

    grid >> select_ports(0, trace_streamlines)
    create_sphere >> select_ports(1, trace_streamlines)


.. GENERATED FROM PYTHON SOURCE LINES 106-107

Visualize streamlines

.. GENERATED FROM PYTHON SOURCE LINES 107-115

.. code-block:: Python

    from vtkmodules.vtkFiltersCore import vtkTubeFilter

    actor = vtkActor()
    actor.mapper = (
        trace_streamlines >> vtkTubeFilter(number_of_sides=3, radius=0.00383538) >> vtkPolyDataMapper()
    ).last
    renderer.AddActor(actor)


.. GENERATED FROM PYTHON SOURCE LINES 116-117

Animate the disk position such that it oscillates between y=-1 and y=1.

.. GENERATED FROM PYTHON SOURCE LINES 117-136

.. code-block:: Python

    from itertools import cycle

    import numpy as np


    class vtkTimerCallback:
        def __init__(self, sphere, window, nsteps=10):
            half_nsteps = int(nsteps / 2)
            self.radii = cycle(
                np.append(np.linspace(0, 0.8, half_nsteps), np.linspace(0.8, 0, half_nsteps))
            )
            self.sphere = sphere
            self.window = window

        def execute(self, obj, event):
            self.sphere.radius = next(self.radii)
            self.window.Render()



.. GENERATED FROM PYTHON SOURCE LINES 137-138

Sign up to receive TimerEvent

.. GENERATED FROM PYTHON SOURCE LINES 138-147

.. code-block:: Python


    cb = vtkTimerCallback(create_sphere, window, nsteps=250)
    interactor.RemoveObservers('TimerEvent')
    interactor.AddObserver('TimerEvent', cb.execute)
    cb.timerId = interactor.CreateRepeatingTimer(2)

    renderer.ResetCamera()
    window.Render()
    interactor.Start()


.. _sphx_glr_download_tutorial_06_vtk_e_vtk_next.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/pyvista/pyvista-tutorial/gh-pages?urlpath=lab/tree/notebooks/tutorial/06_vtk/e_vtk_next.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: e_vtk_next.ipynb <e_vtk_next.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: e_vtk_next.py <e_vtk_next.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
