
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/02_mesh/solutions/b_create-point-cloud.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_02_mesh_solutions_b_create-point-cloud.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_02_mesh_solutions_b_create-point-cloud.py:


.. _create_point_cloud:

Create Point Cloud
~~~~~~~~~~~~~~~~~~

Create a :class:`pyvista.PolyData` object from a point cloud of vertices and
scalar arrays for those points.

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: Python


    import numpy as np
    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 17-23

Point clouds are generally constructed using :class:`pyvista.PolyData` and
can easily have scalar or vector data arrays associated with the individual
points. In this example, we'll start by working backwards using a point cloud
that is available from our ``examples`` module. This however is no
different than creating a PyVista mesh with your own NumPy arrays of vertice
locations.

.. GENERATED FROM PYTHON SOURCE LINES 23-38

.. code-block:: Python



    # Define some helpers - ignore these and use your own data if you like!
    def generate_points(subset=0.02):
        """A helper to make a 3D NumPy array of points (n_points by 3)."""
        dataset = examples.download_lidar()
        ids = np.random.randint(low=0, high=dataset.n_points - 1, size=int(dataset.n_points * subset))
        return dataset.points[ids]


    points = generate_points()
    # Output the first 5 rows to prove it's a numpy array (n_points by 3)
    # Columns are (X, Y, Z)
    points[0:5, :]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    pyvista_ndarray([[4.81104375e+05, 4.40012120e+06, 1.75969995e+03],
                     [4.81007775e+05, 4.40009750e+06, 1.76222998e+03],
                     [4.81072775e+05, 4.40008900e+06, 1.76160999e+03],
                     [4.80951275e+05, 4.40008230e+06, 1.76594995e+03],
                     [4.81087075e+05, 4.40018860e+06, 1.75867004e+03]])



.. GENERATED FROM PYTHON SOURCE LINES 39-41

Now that you have a NumPy array of points/vertices either from our sample
data or your own project, create a PyVista mesh using those points.

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: Python


    point_cloud = pv.PolyData(points)
    point_cloud






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    <table style='width: 100%;'>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>67841</td></tr>
    <tr><td>N Points</td><td>67841</td></tr>
    <tr><td>N Strips</td><td>0</td></tr>
    <tr><td>X Bounds</td><td>4.809e+05, 4.811e+05</td></tr>
    <tr><td>Y Bounds</td><td>4.400e+06, 4.400e+06</td></tr>
    <tr><td>Z Bounds</td><td>1.754e+03, 1.784e+03</td></tr>
    <tr><td>N Arrays</td><td>0</td></tr>
    </table>


    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 46-48

Now, perform a sanity check to show that the points have been loaded
correctly.

.. GENERATED FROM PYTHON SOURCE LINES 48-51

.. code-block:: Python


    np.allclose(points, point_cloud.points)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 52-56

Now that we have a PyVista mesh, we can plot it. Note that we add an option
to use eye dome lighting - this is a shading technique to improve depth
perception with point clouds (learn more about `EDL
<https://docs.pyvista.org/examples/02-plot/edl.html>`_).

.. GENERATED FROM PYTHON SOURCE LINES 56-58

.. code-block:: Python

    point_cloud.plot(eye_dome_lighting=True)








.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /tutorial/02_mesh/solutions/images/sphx_glr_b_create-point-cloud_001.png
        :alt: b create point cloud
        :srcset: /tutorial/02_mesh/solutions/images/sphx_glr_b_create-point-cloud_001.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-tutorial/pyvista-tutorial/doc/source/tutorial/02_mesh/solutions/images/sphx_glr_b_create-point-cloud_001.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 59-71

Now what if you have data attributes (scalar or vector arrays) that you'd
like to associate with every point of your mesh? You can easily add NumPy
data arrays that have a length equal to the number of points in the mesh
along the first axis. For example, lets add a few arrays to this new
``point_cloud`` mesh.

Make an array of scalar values with the same length as the points array.
Each element in this array will correspond to points at the same index:

.. note::
   You can use a component of the ``points`` array or use the ``n_points``
   property of the mesh to make an array of that length.

.. GENERATED FROM PYTHON SOURCE LINES 71-75

.. code-block:: Python


    # Make data array using z-component of points array
    data = points[:, -1]








.. GENERATED FROM PYTHON SOURCE LINES 76-77

Add that data to the mesh with the name "elevation".

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: Python


    point_cloud["elevation"] = data








.. GENERATED FROM PYTHON SOURCE LINES 81-84

And now we can plot the point cloud with that elevation data. PyVista is
smart enough to plot the scalar array you added by default. This time, let's
render every point as its own sphere using ``render_points_as_spheres``.

.. GENERATED FROM PYTHON SOURCE LINES 84-86

.. code-block:: Python

    point_cloud.plot(render_points_as_spheres=True)








.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /tutorial/02_mesh/solutions/images/sphx_glr_b_create-point-cloud_002.png
        :alt: b create point cloud
        :srcset: /tutorial/02_mesh/solutions/images/sphx_glr_b_create-point-cloud_002.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-tutorial/pyvista-tutorial/doc/source/tutorial/02_mesh/solutions/images/sphx_glr_b_create-point-cloud_002.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 87-94

That data is kind of boring, right? You can also add data arrays with more
than one scalar value - perhaps a vector with three elements? Let's make a
little function that will compute vectors for every point in the point cloud
and add those vectors to the mesh.

This time, we're going to create a totally new, random point cloud containing
100 points using :func:`numpy.random.random`.

.. GENERATED FROM PYTHON SOURCE LINES 94-113

.. code-block:: Python


    # Create a random point cloud with Cartesian coordinates
    points = np.random.rand(100, 3)
    # Construct PolyData from those points
    point_cloud = pv.PolyData(points)


    def compute_vectors(mesh):
        """Create normalized vectors pointing outward from the center of the cloud."""
        origin = mesh.center
        vectors = mesh.points - origin
        vectors = vectors / np.linalg.norm(vectors, axis=1)[:, None]
        return vectors


    vectors = compute_vectors(point_cloud)
    vectors[0:5, :]






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    pyvista_ndarray([[ 0.86537418, -0.17746481,  0.468651  ],
                     [ 0.3493065 ,  0.93305677, -0.08596533],
                     [-0.46581139,  0.55544844,  0.68883726],
                     [ 0.12015155,  0.52956185,  0.83971891],
                     [ 0.43492563, -0.65939624, -0.61321798]])



.. GENERATED FROM PYTHON SOURCE LINES 114-115

Add the vector array as point data to the new mesh:

.. GENERATED FROM PYTHON SOURCE LINES 115-118

.. code-block:: Python


    point_cloud['vectors'] = vectors








.. GENERATED FROM PYTHON SOURCE LINES 119-122

Now we can make arrows using those vectors using the glyph filter (see the
`Glyph Example <https://docs.pyvista.org/examples/01-filter/glyphs.html>`_
for more details).

.. GENERATED FROM PYTHON SOURCE LINES 122-138

.. code-block:: Python


    arrows = point_cloud.glyph(
        orient='vectors',
        scale=False,
        factor=0.15,
    )

    # Display the arrows
    plotter = pv.Plotter()
    plotter.add_mesh(point_cloud, color='maroon', point_size=10.0, render_points_as_spheres=True)
    plotter.add_mesh(arrows, color='lightblue')
    # plotter.add_point_labels([point_cloud.center,], ['Center',],
    #                          point_color='yellow', point_size=20)
    plotter.show_grid()
    plotter.show()








.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /tutorial/02_mesh/solutions/images/sphx_glr_b_create-point-cloud_003.png
        :alt: b create point cloud
        :srcset: /tutorial/02_mesh/solutions/images/sphx_glr_b_create-point-cloud_003.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/pyvista-tutorial/pyvista-tutorial/doc/source/tutorial/02_mesh/solutions/images/sphx_glr_b_create-point-cloud_003.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 139-146

.. raw:: html

    <center>
      <a target="_blank" href="https://colab.research.google.com/github/pyvista/pyvista-tutorial/blob/gh-pages/notebooks/tutorial/02_mesh/solutions/b_create-point-cloud.ipynb">
        <img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/ width="150px">
      </a>
    </center>


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.472 seconds)


.. _sphx_glr_download_tutorial_02_mesh_solutions_b_create-point-cloud.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/pyvista/pyvista-tutorial/gh-pages?urlpath=lab/tree/notebooks/tutorial/02_mesh/solutions/b_create-point-cloud.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: b_create-point-cloud.ipynb <b_create-point-cloud.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: b_create-point-cloud.py <b_create-point-cloud.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
